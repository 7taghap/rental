//A message with auto close timer
swal({
  title: 'Auto close alert!',
  text: 'I will close in 2 seconds.',
  timer: 2000
}).then(
  function () {},
  // handling the promise rejection
  function (dismiss) {
    if (dismiss === 'timer') {
      console.log('I was closed by the timer')
    }
  }
)

//jQuery HTML with custom animation 
swal({
  title: 'jQuery HTML example',
  html: $('<div>')
    .addClass('some-class')
    .text('jQuery is everywhere.'),
  animation: false,
  customClass: 'animated tada'
})

//A warning message, with a function attached to the "Confirm"-button...
swal({
  title: 'Are you sure?',
  text: "You won't be able to revert this!",
  type: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes, delete it!'
}).then(function () {
  swal(
    'Deleted!',
    'Your file has been deleted.',
    'success'
  )
})
//.. and by passing a parameter, you can execute something else for "Cancel".
swal({
  title: 'Are you sure?',
  text: "You won't be able to revert this!",
  type: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes, delete it!',
  cancelButtonText: 'No, cancel!',
  confirmButtonClass: 'btn btn-success',
  cancelButtonClass: 'btn btn-danger',
  buttonsStyling: false
}).then(function () {
  swal(
    'Deleted!',
    'Your file has been deleted.',
    'success'
  )
}, function (dismiss) {
  // dismiss can be 'cancel', 'overlay',
  // 'close', and 'timer'
  if (dismiss === 'cancel') {
    swal(
      'Cancelled',
      'Your imaginary file is safe :)',
      'error'
    )
  }
})
//A message with a custom image and CSS animation disabled
swal({
  title: 'Sweet!',
  text: 'Modal with a custom image.',
  imageUrl: 'https://unsplash.it/400/200',
  imageWidth: 400,
  imageHeight: 200,
  animation: false
})

//A message with custom width, padding and background
swal({
  title: 'Custom width, padding, background.',
  width: 600,
  padding: 100,
  background: '#fff url(//bit.ly/1Nqn9HU)'
})

//Ajax request example
swal({
  title: 'Submit email to run ajax request',
  input: 'email',
  showCancelButton: true,
  confirmButtonText: 'Submit',
  showLoaderOnConfirm: true,
  preConfirm: function (email) {
    return new Promise(function (resolve, reject) {
      setTimeout(function() {
        if (email === 'taken@example.com') {
          reject('This email is already taken.')
        } else {
          resolve()
        }
      }, 2000)
    })
  },
  allowOutsideClick: false
}).then(function (email) {
  swal({
    type: 'success',
    title: 'Ajax request finished!',
    html: 'Submitted email: ' + email
  })
})

//Chaining Modal 
//Chaining modals (queue) example
swal.setDefaults({
  input: 'text',
  confirmButtonText: 'Next &rarr;',
  showCancelButton: true,
  animation: false,
  progressSteps: ['1', '2', '3']
})

var steps = [
  {
    title: 'Question 1',
    text: 'Chaining swal2 modals is easy'
  },
  'Question 2',
  'Question 3'
]

swal.queue(steps).then(function (result) {
  swal.resetDefaults()
  swal({
    title: 'All done!',
    html:
      'Your answers: <pre>' +
        JSON.stringify(result) +
      '</pre>',
    confirmButtonText: 'Lovely!',
    showCancelButton: false
  })
}, function () {
  swal.resetDefaults()
})

//Dynamic queue example
swal.queue([{
  title: 'Your public IP',
  confirmButtonText: 'Show my public IP',
  text:
    'Your public IP will be received ' +
    'via AJAX request',
  showLoaderOnConfirm: true,
  preConfirm: function () {
    return new Promise(function (resolve) {
      $.get('https://api.ipify.org?format=json')
        .done(function (data) {
          swal.insertQueueStep(data.ip)
          resolve()
        })
    })
  }
}])